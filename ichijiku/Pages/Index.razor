@page "/"
@using Radzen
@using Radzen.Blazor

<RadzenScheduler @ref=@scheduler style="min-height:90vh;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Title"  SlotRender=@OnSlotRender AppointmentRender=@OnAppointmentRender SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect>
    <RadzenMonthView />
</RadzenScheduler>
@if (modalDate != null)
{
    <Drawer Style="position:absolute" Visible="@visible" Placement="bottom" Title='("Basic Drawer")' OnClose="_=>close()">
    
        <RangePicker TValue="DateTime[]"  DefaultValue="new DateTime[]{ modalDate.Start, modalDate.End }"/>
    
    </Drawer>
}

@code {
    RadzenScheduler<Appointment>? scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    bool visible = false;
    Appointment? modalDate { get; set; }
    //Appointment? modalDate = new Appointment{ Start = DateTime.Today, End = DateTime.Today, Title = "test" };
    public class Appointment
    {
        public int? id { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string? Title { get; set; }
    }

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { id = 1, Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Title = "Birthday" },
        new Appointment { id = 2, Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Title = "Day off" },
        new Appointment { id = 3, Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Title = "Work from home" },
        new Appointment { id = 4, Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Title = "Online meeting" },
        new Appointment { id = 5, Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Title = "Skype call" },
        new Appointment { id = 6, Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Title = "Dentist appointment" },
        new Appointment { id = 7, Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Title = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Title == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        this.visible = true;

        //modalDate = new Appointment();

        //modalDate.Start = args.Start;
        //modalDate.End = args.Start;
        //modalDate.Title = "新規作成";
        modalDate = new Appointment{ id = null, Start = args.Start, End = args.End, Title = "test" };
        await scheduler.Reload();
    }
    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        this.visible = true;
        modalDate = new Appointment();
        modalDate.Start = args.Data.Start;
        modalDate.End = args.Data.End;
        modalDate.Title = args.Data.Title;
    }

    async Task ok(MouseEventArgs e)
    {
        if (modalDate != null)
        {
            appointments.Add(modalDate);
            modalDate = null;
            await scheduler.Reload();
        }
        this.visible = false;
    }
    void close()
    {
        this.visible = false;
        modalDate = null;
    }
}
